# -*- org-confirm-babel-evaluate: nil -*-
#+TITLE: ParkinsonPathAI (Working title) - AI Models for Pathway Analysis in Parkinson’s Disease
#+OPTIONS: ^:nil
#+Author: Sam Neaves

* Introduction

This project focuses on analyzing single-cell transcriptomic data from
brain cells of both control and Parkinson’s disease donors. Our goal
is to characterize the complex interplay between the RAS and dopamine
pathways, we will attempt to do this using symbolic AI techniques. By employing methods like
descriptive rule induction, causal analysis, and model
building/repair, we aim to identify and understand unique cell states
associated with Parkinson’s disease.

Our approach reconciles gene networks with experimental data, allowing
us to reason about network consistency and potentially discover key
molecular signatures involved in disease progression. This repository will
contain code, data preprocessing steps, and model implementation
details for this exploratory analysis.

This is an open scientific project, actively developed in the
open-source community and a continuous work in progress. As the
results are preliminary, they may evolve over time with further
analysis and validation. If you spot any errors or have suggestions,
please feel free to open an issue. Contributions and feedback from the
community are welcome to help improve and refine our understanding of
the RAS and dopamine pathways in Parkinson’s disease.

* Data

Biological cell samples were collected postmortem from the ventral
substantia nigra of seven control samples, nine Parkinson's disease
samples, and four samples from patients with Incidental Lewy Body
Disorder. The nuclei of these cells were extracted and sequenced,
totaling 23,885 nuclei. The sequecning was deep and full
length. [INSERT DETALS OF SEQUENCING TECH OR REFERNCE]

** System biology approach

Our approach to this analysis is grounded in symbolic systems
biology. In systems biology, our goal is to understand and model
biological reality at a systems level. This means focusing on how
multiple aspects of biology interact to produce observable outcomes,
contrasting with traditional approaches that isolate individual
phenomena. Symbolic systems biology differs from quantitative systems
biology in the level of abstraction it applies.


Using discrete symbols to represent components of the system, rather
than specific quantities, offers several advantages. First,
abstracting measured data into symbolic form allows us to manage noise
in the data. Second, this abstraction reduces the size of the state
space we analyze, making certain computational methods more
feasible. Third, our goal is not only to understand the system but
also to control it. Therefore, it’s essential that our models and
their dynamics are interpretable, allowing suggested interventions and
their potential consequences to be validated in a laboratory setting.


Finally, there is evidence that symbolic abstraction is sufficient to
model biological dynamics in many cases.


Biological reality is highly complex. While the central dogma—DNA
transcribed to RNA, translated to protein—outlines the basic process
of cellular maintenance and control, the specifics of transcription,
translation, and metabolic pathways leading to disease are intricate
and require further exploration.


For instance, in somatic cells, DNA remains stable as cells
replicate. Differences between cells arise through processes such as
differentiation and gene regulation. Transcription can occur in
bursts, and alternative splicing allows for multiple proteins from a
single gene. Additionally, protein complexes may form with the aid of
chaperones, and epigenetic mechanisms, such as methylation and histone
modification, affect gene accessibility.




*** Intreptation of sequence data as instances in state space.

In our analysis of transcriptome from nuclei, previous work has
identified cell types using x method.
In addition cell states have been identified by y method.

** RAS MAPK pathway

In this work we are intrested in these pathways and the interplay.

I obtained two lists of genes from the two pathways from a collegue
(Viola - check where she got them from).
In order to get a full list of genes that we are intreseted in and their
interactions, we augment our intital list and query pathway commons to
obtain a network of genes. We use the pyBravo tool to make this query.

The intial list is :

Raas genes:
#+begin_src bash :results output :exports both
  cat ./data/initial_gene_list_files/raas_genes.txt
#+end_src

#+RESULTS:
#+begin_example
ACE
ADCY
AGTR1
AGTR2
AGT
ATF2
CCL2
CCL5
DAG1
ELK1
ERK1
ERK2
FOS
GNAQ
GRB2
IP3
JAK2
JNK
JUN
MAP2K1
MAP2K2
MAP2K4
MAP3K1
NFKB1
NO
NOX1
MAPK
PAK
PGE2
PI3K
PIP2
PKA
PKC
PLCG1
PTGER2
PTK2
PTK2B
PTPN6
RAC1
RAF1
HRAS
KRAS
REN
SHC1
SOS1
STAT1
STAT3
TNF
#+end_example

Dopamine KEGG pathway:

#+begin_src bash :results output :exports both
  cat ./data/initial_gene_list_files/DopamineKEGGpathway.txt
#+end_src

#+RESULTS:
#+begin_example
AKT3
CREB3
GNB5
ADCY5
COMT
CREB1
ATF2
ATF6B
MAPK14
CREB3L4
CALML6
DDC
DRD1
DRD2
DRD3
DRD4
DRD5
AKT1
AKT2
LRTOMT
PLCB1
FOS
GNAI1
GNAI2
GNAI3
GNAL
GNAQ
GNAO1
GNAS
GNB1
GNB2
GNB3
GNG3
GNG4
GNG5
GNG7
GNG10
GNG11
GNGT1
GNGT2
PPP2R3B
GRIA1
GRIA2
GRIA3
GRIA4
GRIN2A
GRIN2B
GSK3A
GSK3B
ITPR1
ITPR2
ITPR3
KCNJ3
KCNJ5
KCNJ6
KCNJ9
KIF5A
KIF5B
KIF5C
ARNTL
ARRB1
ARRB2
MAOA
MAOB
ATF4
CALY
GNG13
CALML5
PLCB2
PLCB3
PLCB4
GNG2
PPP1CA
PPP1CB
PPP1CC
PPP2R3C
PPP2CA
PPP2CB
PPP2R1A
PPP2R1B
PPP2R2A
PPP2R2B
PPP2R2C
PPP2R3A
PPP2R5A
PPP2R5B
PPP2R5C
PPP2R5D
PPP2R5E
PPP3CA
PPP3CB
PPP3CC
PRKACA
PRKACB
PRKACG
PRKCA
PRKCB
PRKCG
PPP2R2D
GNG12
MAPK8
MAPK11
MAPK13
GNB4
MAPK12
SCN1A
CREB3L2
SLC6A3
TH
CACNA1A
CACNA1B
CACNA1C
CACNA1D
CALM1
CALM2
CALM3
CALML3
CAMK2A
CAMK2B
CAMK2D
CAMK2G
PPP1R1B
CREB3L3
CREB3L1
CALML4
GNG8
CLOCK
CREB5
SLC18A2
SLC18A1
MAPK9
MAPK10

#+end_example

These were provided by Viola.

The intersection of these files is:
#+begin_src bash :results output :exports both
  grep -Fxf ./data/initial_gene_list_files/DopamineKEGGpathway.txt ./data/initial_gene_list_files/raas_genes.txt
#+end_src

#+RESULTS:
: ATF2
: FOS
: GNAQ

The union of these files is:

#+begin_src bash :results output :export both
  cat ./data/initial_gene_list_files/DopamineKEGGpathway.txt ./data/initial_gene_list_files/raas_genes.txt | sort | uniq | tee ./data/initial_gene_list_files/initial_gene_list.txt
  wc -l ./data/initial_gene_list_files/initial_gene_list.txt
#+end_src

#+RESULTS:
#+begin_example

ACE
ADCY
ADCY5
AGT
AGTR1
AGTR2
AKT1
AKT2
AKT3
ARNTL
ARRB1
ARRB2
ATF2
ATF4
ATF6B
CACNA1A
CACNA1B
CACNA1C
CACNA1D
CALM1
CALM2
CALM3
CALML3
CALML4
CALML5
CALML6
CALY
CAMK2A
CAMK2B
CAMK2D
CAMK2G
CCL2
CCL5
CLOCK
COMT
CREB1
CREB3
CREB3L1
CREB3L2
CREB3L3
CREB3L4
CREB5
DAG1
DDC
DRD1
DRD2
DRD3
DRD4
DRD5
ELK1
ERK1
ERK2
FOS
GNAI1
GNAI2
GNAI3
GNAL
GNAO1
GNAQ
GNAS
GNB1
GNB2
GNB3
GNB4
GNB5
GNG10
GNG11
GNG12
GNG13
GNG2
GNG3
GNG4
GNG5
GNG7
GNG8
GNGT1
GNGT2
GRB2
GRIA1
GRIA2
GRIA3
GRIA4
GRIN2A
GRIN2B
GSK3A
GSK3B
HRAS
IP3
ITPR1
ITPR2
ITPR3
JAK2
JNK
JUN
KCNJ3
KCNJ5
KCNJ6
KCNJ9
KIF5A
KIF5B
KIF5C
KRAS
LRTOMT
MAOA
MAOB
MAP2K1
MAP2K2
MAP2K4
MAP3K1
MAPK
MAPK10
MAPK11
MAPK12
MAPK13
MAPK14
MAPK8
MAPK9
NFKB1
NO
NOX1
PAK
PGE2
PI3K
PIP2
PKA
PKC
PLCB1
PLCB2
PLCB3
PLCB4
PLCG1
PPP1CA
PPP1CB
PPP1CC
PPP1R1B
PPP2CA
PPP2CB
PPP2R1A
PPP2R1B
PPP2R2A
PPP2R2B
PPP2R2C
PPP2R2D
PPP2R3A
PPP2R3B
PPP2R3C
PPP2R5A
PPP2R5B
PPP2R5C
PPP2R5D
PPP2R5E
PPP3CA
PPP3CB
PPP3CC
PRKACA
PRKACB
PRKACG
PRKCA
PRKCB
PRKCG
PTGER2
PTK2
PTK2B
PTPN6
RAC1
RAF1
REN
SCN1A
SHC1
SLC18A1
SLC18A2
SLC6A3
SOS1
STAT1
STAT3
TH
TNF
     178 ./data/initial_gene_list_files/initial_gene_list.txt
#+end_example

Next in order to understand which other genes have known interactions
with this list and how this list is related we query pathway commons
using pybravo.

For Pybravo to function, it must connect to a SPARQL endpoint from
Pathway Commons. Unfortunately, this resource can be unreliable at
times. However, it’s possible to set up a local SPARQL endpoint by
building a Docker container. A Docker recipe file is available in this
GitHub repository:

https://github.com/mkarikom/PathwayCommons-VOS#pathwaycommons-v12-on-virtuoso-7

With Pybravo installed and an appropriate Conda environment set up, we
can configure Pybravo to connect to our local instance of the Pathway
Commons SPARQL endpoint for querying.


We have set up the command to run from a Biomake file (makeprog in the
scripts directory).



#+begin_src bash :dir "./scripts/" :exports both :eval query :results output
  biomake "augment_gene_list" | tail -n 40
#+end_src

#+RESULTS:
#+begin_example
--- Upstream regulation network in 68.57 seconds ---
Number of nodes = 1339
Number of edges = 12032
SIF network written to ../data/pybravo_output/expanded_reg.sif
Basic regulation reaction provenance written to ../data/pybravo_output/expanded_reg-provenance.csv

| Node | Degree Centrality |
|------|------|
| NOG | 0.264 | 
| SP1 | 0.182 | 
| LEF1 | 0.17 | 
| MAZ | 0.168 | 
| TCF3 | 0.155 | 
| FOXO4 | 0.143 | 
| TGFB1 | 0.138 | 
| JUN | 0.136 | 
| MYC | 0.128 | 
| PAX4 | 0.123 | 

--- Network simplification in 2.49 seconds ---
SIF network written to ../data/pybravo_output/expanded_reg-unified.sif
Basic regulation reaction provenance written to ../data/pybravo_output/expanded_reg-unified-provenance.csv
Nodes after simplification = 1229
Edges after simplification = 11912

| Node | Degree Centrality |
|------|------|
| NOG | 0.276 | 
| DAND5 | 0.195 | 
| LEF1 | 0.182 | 
| MAZ | 0.178 | 
| TCF7L1 | 0.176 | 
| FOXO4 | 0.155 | 
| JUN | 0.151 | 
| TGFB1 | 0.149 | 
| HNF1A | 0.149 | 
| PVT1 | 0.139 | 


Target augment_gene_list built
#+end_example




This results in the creation of four files in the pybravo_output dir

expanded_reg_md10-provenance.csv
expanded_reg_md10-unified-provenance.csv expanded_reg_md10-unified.sif
expanded_reg_md10.sif

The expanded_reg_md10-unified.sif file can be viewed in cyto scape.

#+CAPTION: Gene Regulation Network
#+NAME:   fig:1
[[./data/plots/expanded_reg_md10-unified.png]]





** Subgroup discovery of celluar states


As a first step in our analysis, we take inspiration from an approach
used by WWII bomber command to improve aircraft survivability. The
story goes that analysts examined planes returning to England to see
where they had sustained damage. They inferred that planes could
survive damage in these areas, so to improve survivability, they added
armor to areas where damage had not been observed, presuming planes
hit in these unscathed areas did not return. This concept, known as
"survivorship bias," helps us focus on the states that are less likely
to survive or, in our case, cells lost in disease.


#+CAPTION: A 'State' of a surviving bomber
#+NAME:   fig:2
#+ATTR_ORG: :width "50"
#+ATTR_HTML: :width "100px"
[[./data/plots/Survivorship-bias.png]]



In our analogy, dopaminergic neurons (DNs) are known to be lost in
Parkinson’s disease. Therefore, cell states we observe in Parkinson’s
patients represent neurons that have managed to survive the
disease. Unlike bomber command who did not have access to planes that
did not return we also have access to data from control (CTRL)
individuals who do not have Parkinson’s disease, which we use as a
proxy for healthy neuron states.


Our goal is to identify descriptions—defined as combinations of gene
expression levels—that select subgroups of cell states with
statistically distinct patterns compared to the overall population of
cells. Specifically, we want to identify cellular states that are
common in CTRL samples but absent in Parkinson’s patients, aiming to
uncover features that may correlate with cell survival.

Once we have done this, we will be able to order cellular states using
pseudo time methods and try to understand why healthy peoples cells
are able to transistion into these states but people with parkinsons
disease are not.

To achieve this first step of identifying cellular states that appear
in CTRLS but not parkinson patients, we employ subgroup discovery, a data mining task
first described by Wrobel et al., which lies at the intersection of
classification and clustering. Subgroup discovery uses labeled data as
in classification, but its purpose is to describe statistically
interesting instances within these groups, aiming for descriptions
that are both interpretable and informative.


Subgroup discovery has previously been used in bioinformatics to
analyze gene expression, in tasks similar to gene set enrichment
analysis (GSEA). In GSEA, genes are instances, their descriptions are
annotations (such as GO terms), and labels are binary (e.g.,
differentially expressed or not). In contrast, our instances are cells
(or nuclei), our labels are CTRL or Parkinson’s, and our features are
gene expression values. Our goal is to identify and describe subgroups
of cellular transcriptomic states that are prominent in CTRL samples
but absent in Parkinson’s patients, potentially uncovering gene
expression profiles linked to neuron survival.


For this initial analysis, we limit subgroup discovery to a
propositional data mining task, focusing on attributes at the
individual cell level. While we do not yet incorporate relational
information available from Pathway Commons, such relationships could
provide valuable context in the future. Exploring this would require
methods like Relational Subgroup Discovery (RSD) or potentially
Hedwig. Currently, we use the query to Pathway Commons, executed
through Pybravo, primarily as a feature selection technique to focus
on gene expressions of interest.


** Data info

"Just sending the single nuclei data for the dopaminergic neurons in our atlas as Caleb suggested.
The file “SNatlas_DaNs_seurat.RData” is in the usual Dropbox folder.
The Seurat object in it is called “sn_atlas_dans” and contains all
neurons across all disease stages and subtypes. You can access disease
by sn_atlas_dans$Disease and cell subtype by
sn_atlas_dans$CellSubType. And extract gene expression data as raw
counts genes_counts<-as.matrix(GetAssayData(sn_atlas_dans, slot =
"counts")) or normalised
genes_norm<-as.matrix(GetAssayData(sn_atlas_dans, slot = "data"))."



#+begin_src R :session :eval query 
  library(dplyr)
  library(Seurat)
  library(patchwork)

  data_location <- "/Users/samneaves/Documents/test_data/forSam/SNatlas_DaNs_seurat.RData"
  load(data_location)

#+end_src

#+RESULTS:
: sn_atlas_dans

#+begin_src R :session
head(sn_atlas_dans$CellSubType)
#+end_src

#+RESULTS:
| DaN_0 |
| DaN_0 |
| DaN_1 |
| DaN_1 |
| DaN_0 |
| DaN_0 |

*** Get the normalised expression values
#+begin_src R :session :results none
genes_norm<-as.matrix(GetAssayData(sn_atlas_dans, slot = "data"))
#+end_src

#+RESULTS:


*** Get the count expression values

#+begin_src R :session :results none
genes_counts<-as.matrix(GetAssayData(sn_atlas_dans, slot = "counts"))
#+end_src

** Finding the overlap of list of genes that we get back from pathway commons and our data
#+begin_src R :session :results output :exports both
  network_data <- read.table("./data/pybravo_output/expanded_reg_md10-unified.sif", quote = "", header = FALSE, stringsAsFactors = FALSE, sep = "\t")
  head(network_data)
  nodes <- unique(c(network_data$V1, network_data$V3))
#+end_src

#+RESULTS:
:         V1         V2     V3
: 1 Fra1/JUN ACTIVATION   CCL2
: 2 Fra1/JUN ACTIVATION   Fra1
: 3 Fra1/JUN ACTIVATION    IL6
: 4 Fra1/JUN ACTIVATION p14ARF
: 5 Fra1/JUN ACTIVATION   MMP9
: 6 Fra1/JUN ACTIVATION  CXCL8

#+begin_src R :session :results output :exports both
  length(nodes)
#+end_src

#+RESULTS:
: [1] 1053

#+begin_src R :session :exports both
  # Convert the rownames of genes_counts into a vector
  genes_names <- rownames(genes_counts)

  # Get the intersection between the 'name' column in node_table and the rownames of genes_counts_subset_df
  common_names <- intersect(nodes, genes_names)

  # View the result
  length(common_names)
#+end_src

#+RESULTS:
: 526


In the graph representation we have genes and protein complexes.
A protein complex node is represented by Item/Item. For example

SMAD3/SMAD4/JUN/FOS

When we match our gene expression data to the network. These nodes
will be unobserved. We will need to infer if they are able to
form/activate.

In the way that the pybravo paper describes these nodes are used in
there iggy analysis. The part of edge is treated as plus. But I think the standard consistency
check is only looking for at least one positive edge. So not sure if
that is appropiate. (will detail later).

For the time being the number of complexes seem to be :

#+begin_src R :session :exports both
# Identify rows in the 'name' column that contain '/'
complexes <- grep("/", nodes)

# Count the number of complexes
num_complexes <- length(complexes)

# View the count
num_complexes
#+end_src

#+RESULTS:
: 296

#+begin_src R :session :exports both
# Count occurrences of each edge type in the second column (V2)
edge_counts <- table(network_data$V2)

# Display the counts of each edge type
print(edge_counts)
#+end_src

#+RESULTS:
| ACTIVATION | 1710 |
| INHIBITION |  655 |
| PART_OF    |  567 |
| UNKNOWN    |   95 |

* do we want to extract min graph of nodes in subgroup rule?





