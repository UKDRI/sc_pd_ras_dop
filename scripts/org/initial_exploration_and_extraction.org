# -*- org-confirm-babel-evaluate: nil -*-
#+TITLE: Initial Data Exploration and Data Extraction
#+OPTIONS: ^:nil
#+Author: Sam Neaves
#+EXPORT_FILE_NAME: ../public_html/initial_exploration_and_extraction.html
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-bigblow.setup



#+HTML_LINK_UP: overview.html
#+HTML: <div id="navigation"> <div id="mytitle"><h1>ParkinsonPathAI (Working title) - AI Models for Pathway Analysis in Parkinson’s Disease</h1></div>
#+INCLUDE: "sitemap.org" :lines "3-"
#+HTML: </div>

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="styles.css">

* About

This work is a part of the [[file:../readme.org][ParkinsonPathAI]] project. The code described
here is part 2 of the work.


* Data info

"Just sending the single nuclei data for the dopaminergic neurons in our atlas as Caleb suggested.
The file “SNatlas_DaNs_seurat.RData” is in the usual Dropbox folder.
The Seurat object in it is called “sn_atlas_dans” and contains all
neurons across all disease stages and subtypes. You can access disease
by sn_atlas_dans$Disease and cell subtype by
sn_atlas_dans$CellSubType. And extract gene expression data as raw
counts genes_counts<-as.matrix(GetAssayData(sn_atlas_dans, slot =
"counts")) or normalised
genes_norm<-as.matrix(GetAssayData(sn_atlas_dans, slot = "data"))."



#+begin_src R :session :eval query :tangle ../r/init_data_explore_extract.r :comments link :shebang "#!/usr/bin/env Rscript" 
      library(dplyr)
      library(Seurat)
      library(patchwork)

      data_location <- "/Users/samneaves/Documents/test_data/forSam/SNatlas_DaNs_seurat.RData"
      load(data_location)

#+end_src

#+RESULTS:
: sn_atlas_dans

#+begin_src R :session :tangle ../r/init_data_explore_extract.r :comments link :shebang "#!/usr/bin/env Rscript" :exports both
head(sn_atlas_dans$CellSubType)
#+end_src

#+RESULTS:
| DaN_0 |
| DaN_0 |
| DaN_1 |
| DaN_1 |
| DaN_0 |
| DaN_0 |



** Get the normalised expression values
#+begin_src R :session :tangle ../r/init_data_explore_extract.r :comments link :shebang "#!/usr/bin/env Rscript" :results none
genes_norm<-as.matrix(GetAssayData(sn_atlas_dans, slot = "data"))
#+end_src

#+RESULTS:


** Get the count expression values

#+begin_src R :session :tangle ../r/init_data_explore_extract.r :comments link :shebang "#!/usr/bin/env Rscript" :results none
genes_counts<-as.matrix(GetAssayData(sn_atlas_dans, slot = "counts"))
#+end_src

* Finding the overlap
Find the overlap of list of genes that we get back from pathway commons and our data
#+begin_src R :session :tangle ../r/init_data_explore_extract.r :comments link :shebang "#!/usr/bin/env Rscript" :results output :exports both
  network_data <- read.table("../../data/pybravo_output/expanded_reg_md10-unified.sif", quote = "", header = FALSE, stringsAsFactors = FALSE, sep = "\t")
  head(network_data)
  nodes <- unique(c(network_data$V1, network_data$V3))
#+end_src

#+RESULTS:
:         V1         V2     V3
: 1 Fra1/JUN ACTIVATION   CCL2
: 2 Fra1/JUN ACTIVATION   Fra1
: 3 Fra1/JUN ACTIVATION    IL6
: 4 Fra1/JUN ACTIVATION p14ARF
: 5 Fra1/JUN ACTIVATION   MMP9
: 6 Fra1/JUN ACTIVATION  CXCL8


#+begin_src R :session :tangle ../r/init_data_explore_extract.r :comments link :shebang "#!/usr/bin/env Rscript" :results output :exports both
  length(nodes)
#+end_src

#+RESULTS:
: [1] 1053

#+begin_src R :session :tangle ../r/init_data_explore_extract.r :comments link :shebang "#!/usr/bin/env Rscript" :results output :exports both
  # Convert the rownames of genes_counts into a vector
  genes_names <- rownames(genes_counts)

  # Get the intersection between the 'name' column in node_table and the rownames of genes_counts_subset_df
  common_names <- intersect(nodes, genes_names)

  # View the result
  length(common_names)
#+end_src

#+RESULTS:
: [1] 526

* Complexes
In the graph representation we have genes and protein complexes.
A protein complex node is represented by Item/Item. For example

SMAD3/SMAD4/JUN/FOS

When we match our gene expression data to the network. These nodes
will be unobserved. We will need to infer if they are able to
form/activate.

In the way that the pybravo paper describes these nodes are used in
there iggy analysis. The 'part_of' edge is treated as plus. But I think the standard consistency
check is only looking for at least one positive edge to label a node
as consistant So not sure if that is appropiate. (will add detail to
this point later).

For the time being the number of complexes seem to be :

#+begin_src R :session :tangle ../r/init_data_explore_extract.r :comments link :shebang "#!/usr/bin/env Rscript" :results output :exports both
# Identify rows in the 'name' column that contain '/'
complexes <- grep("/", nodes)

# Count the number of complexes
num_complexes <- length(complexes)

# View the count
num_complexes
#+end_src

#+RESULTS:
: [1] 296

* Edge types
#+begin_src R :session :tangle ../r/init_data_explore_extract.r :comments link :shebang "#!/usr/bin/env Rscript" :results output :exports both
# Count occurrences of each edge type in the second column (V2)
edge_counts <- table(network_data$V2)

# Display the counts of each edge type
print(edge_counts)
#+end_src

#+RESULTS:
: 
: ACTIVATION INHIBITION    PART_OF    UNKNOWN 
:       1711        654        567         95



#+begin_src R :session :tangle ../r/init_data_explore_extract.r :comments link :shebang "#!/usr/bin/env Rscript" :results output :exports both
  str(sn_atlas_dans)
  summary(sn_atlas_dans)
#+end_src

#+RESULTS:
#+begin_example
Formal class 'Seurat' [package "SeuratObject"] with 13 slots
  ..@ assays      :List of 1
  .. ..$ RNA:Formal class 'Assay' [package "SeuratObject"] with 8 slots
  .. .. .. ..@ counts       :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. .. .. .. ..@ i       : int [1:78129850] 3 4 7 10 12 13 16 18 19 20 ...
  .. .. .. .. .. ..@ p       : int [1:7489] 0 15120 31612 38747 52967 66145 77907 88892 104156 114056 ...
  .. .. .. .. .. ..@ Dim     : int [1:2] 19803 7488
  .. .. .. .. .. ..@ Dimnames:List of 2
  .. .. .. .. .. .. ..$ : chr [1:19803] "OR4F5" "OR4F29" "OR4F16" "SAMD11" ...
  .. .. .. .. .. .. ..$ : chr [1:7488] "ATTCAAGGCGATATCC_chip02_HC1" "ATTCAAGGTTAGGCGG_chip02_HC1" "GACTCAAGAGTCTCCG_chip02_HC1" "CTAAGCATCTTCTTAC_chip02_HC1" ...
  .. .. .. .. .. ..@ x       : num [1:78129850] 5 1 3 7 13 8 1 1 3 3 ...
  .. .. .. .. .. ..@ factors : list()
  .. .. .. ..@ data         :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. .. .. .. ..@ i       : int [1:78129850] 3 4 7 10 12 13 16 18 19 20 ...
  .. .. .. .. .. ..@ p       : int [1:7489] 0 15120 31612 38747 52967 66145 77907 88892 104156 114056 ...
  .. .. .. .. .. ..@ Dim     : int [1:2] 19803 7488
  .. .. .. .. .. ..@ Dimnames:List of 2
  .. .. .. .. .. .. ..$ : chr [1:19803] "OR4F5" "OR4F29" "OR4F16" "SAMD11" ...
  .. .. .. .. .. .. ..$ : chr [1:7488] "ATTCAAGGCGATATCC_chip02_HC1" "ATTCAAGGTTAGGCGG_chip02_HC1" "GACTCAAGAGTCTCCG_chip02_HC1" "CTAAGCATCTTCTTAC_chip02_HC1" ...
  .. .. .. .. .. ..@ x       : num [1:78129850] 0.096 0.0199 0.0587 0.1319 0.2326 ...
  .. .. .. .. .. ..@ factors : list()
  .. .. .. ..@ scale.data   : num [1:2000, 1:7488] -0.0491 -0.0694 0.2405 -0.064 -0.0377 ...
  .. .. .. .. ..- attr(*, "dimnames")=List of 2
  .. .. .. .. .. ..$ : chr [1:2000] "HES4" "RNF223" "C1QTNF12" "FNDC10" ...
  .. .. .. .. .. ..$ : chr [1:7488] "ATTCAAGGCGATATCC_chip02_HC1" "ATTCAAGGTTAGGCGG_chip02_HC1" "GACTCAAGAGTCTCCG_chip02_HC1" "CTAAGCATCTTCTTAC_chip02_HC1" ...
  .. .. .. ..@ assay.orig   : NULL
  .. .. .. ..@ var.features : chr [1:2000] "RGS1" "HLA-DRA" "RNASE6" "FOS" ...
  .. .. .. ..@ meta.features:'data.frame':	19803 obs. of  5 variables:
  .. .. .. .. ..$ vst.mean                 : num [1:19803] 0.09773 0.00126 0.00148 1.08839 2.46327 ...
  .. .. .. .. ..$ vst.variance             : num [1:19803] 3.04 2.39e-03 2.95e-03 2.80e+02 1.48e+03 ...
  .. .. .. .. ..$ vst.variance.expected    : num [1:19803] 4.53 3.41e-03 4.26e-03 2.88e+02 8.75e+02 ...
  .. .. .. .. ..$ vst.variance.standardized: num [1:19803] 0.672 0.699 0.693 0.973 1.698 ...
  .. .. .. .. ..$ vst.variable             : logi [1:19803] FALSE FALSE FALSE FALSE FALSE FALSE ...
  .. .. .. ..@ misc         : list()
  .. .. .. ..@ key          : chr "rna_"
  ..@ meta.data   :'data.frame':	7488 obs. of  16 variables:
  .. ..$ orig.ident     : Factor w/ 1 level "SeuratProject": 1 1 1 1 1 1 1 1 1 1 ...
  .. ..$ nCount_RNA     : num [1:7488] 496313 680897 23228 362198 450873 ...
  .. ..$ nFeature_RNA   : int [1:7488] 15120 16492 7135 14220 13178 11762 10985 15264 9900 15011 ...
  .. ..$ Barcode        : chr [1:7488] "ATTCAAGGCGATATCC" "ATTCAAGGTTAGGCGG" "GACTCAAGAGTCTCCG" "CTAAGCATCTTCTTAC" ...
  .. ..$ Sample         : chr [1:7488] "HC1" "HC1" "HC1" "HC1" ...
  .. ..$ name           : chr [1:7488] "ATTCAAGGCGATATCC_chip02_HC1" "ATTCAAGGTTAGGCGG_chip02_HC1" "GACTCAAGAGTCTCCG_chip02_HC1" "CTAAGCATCTTCTTAC_chip02_HC1" ...
  .. ..$ Sample_v2      : chr [1:7488] "12_137" "12_137" "12_137" "12_137" ...
  .. ..$ Disease        : chr [1:7488] "CTR" "CTR" "CTR" "CTR" ...
  .. ..$ Sex            : chr [1:7488] "M" "M" "M" "M" ...
  .. ..$ CellType       : chr [1:7488] "DaN" "DaN" "DaN" "DaN" ...
  .. ..$ CellSubType    : chr [1:7488] "DaN_0" "DaN_0" "DaN_1" "DaN_1" ...
  .. ..$ clust.disease  : chr [1:7488] "DaN_CTR" "DaN_CTR" "DaN_CTR" "DaN_CTR" ...
  .. ..$ cluster        : Factor w/ 86 levels "Microglia_1_CTR",..: 8 8 10 10 8 8 8 10 8 8 ...
  .. ..$ RNA_snn_res.0.6: Factor w/ 12 levels "0","1","2","3",..: 4 4 4 4 2 4 11 4 2 4 ...
  .. ..$ seurat_clusters: Factor w/ 12 levels "0","1","2","3",..: 4 4 4 4 2 4 11 4 2 4 ...
  .. ..$ cellt_dis      : chr [1:7488] "DaN_0_CTR" "DaN_0_CTR" "DaN_1_CTR" "DaN_1_CTR" ...
  ..@ active.assay: chr "RNA"
  ..@ active.ident: Factor w/ 16 levels "DaN_0_CTR","DaN_1_CTR",..: 1 1 2 2 1 1 1 2 1 1 ...
  .. ..- attr(*, "names")= chr [1:7488] "ATTCAAGGCGATATCC_chip02_HC1" "ATTCAAGGTTAGGCGG_chip02_HC1" "GACTCAAGAGTCTCCG_chip02_HC1" "CTAAGCATCTTCTTAC_chip02_HC1" ...
  ..@ graphs      :List of 2
  .. ..$ RNA_nn :Formal class 'Graph' [package "SeuratObject"] with 7 slots
  .. .. .. ..@ assay.used: chr(0) 
  .. .. .. ..@ i         : int [1:133383] 0 121 132 180 203 861 1013 2542 2554 2947 ...
  .. .. .. ..@ p         : int [1:7489] 0 17 34 39 50 62 65 71 78 96 ...
  .. .. .. ..@ Dim       : int [1:2] 7488 7488
  .. .. .. ..@ Dimnames  :List of 2
  .. .. .. .. ..$ : chr [1:7488] "ATTCAAGGCGATATCC_chip02_HC1" "ATTCAAGGTTAGGCGG_chip02_HC1" "GACTCAAGAGTCTCCG_chip02_HC1" "CTAAGCATCTTCTTAC_chip02_HC1" ...
  .. .. .. .. ..$ : chr [1:7488] "ATTCAAGGCGATATCC_chip02_HC1" "ATTCAAGGTTAGGCGG_chip02_HC1" "GACTCAAGAGTCTCCG_chip02_HC1" "CTAAGCATCTTCTTAC_chip02_HC1" ...
  .. .. .. ..@ x         : num [1:133383] 1 1 1 1 1 1 1 1 1 1 ...
  .. .. .. ..@ factors   : list()
  .. ..$ RNA_snn:Formal class 'Graph' [package "SeuratObject"] with 7 slots
  .. .. .. ..@ assay.used: chr(0) 
  .. .. .. ..@ i         : int [1:431820] 0 42 121 180 203 580 793 1011 1013 1022 ...
  .. .. .. ..@ p         : int [1:7489] 0 39 99 131 173 215 243 269 305 344 ...
  .. .. .. ..@ Dim       : int [1:2] 7488 7488
  .. .. .. ..@ Dimnames  :List of 2
  .. .. .. .. ..$ : chr [1:7488] "ATTCAAGGCGATATCC_chip02_HC1" "ATTCAAGGTTAGGCGG_chip02_HC1" "GACTCAAGAGTCTCCG_chip02_HC1" "CTAAGCATCTTCTTAC_chip02_HC1" ...
  .. .. .. .. ..$ : chr [1:7488] "ATTCAAGGCGATATCC_chip02_HC1" "ATTCAAGGTTAGGCGG_chip02_HC1" "GACTCAAGAGTCTCCG_chip02_HC1" "CTAAGCATCTTCTTAC_chip02_HC1" ...
  .. .. .. ..@ x         : num [1:431820] 1 0.25 0.25 0.25 0.25 ...
  .. .. .. ..@ factors   : list()
  ..@ neighbors   : list()
  ..@ reductions  :List of 2
  .. ..$ pca :Formal class 'DimReduc' [package "SeuratObject"] with 9 slots
  .. .. .. ..@ cell.embeddings           : num [1:7488, 1:50] 4.437 4.6 3.875 0.431 0.952 ...
  .. .. .. .. ..- attr(*, "dimnames")=List of 2
  .. .. .. .. .. ..$ : chr [1:7488] "ATTCAAGGCGATATCC_chip02_HC1" "ATTCAAGGTTAGGCGG_chip02_HC1" "GACTCAAGAGTCTCCG_chip02_HC1" "CTAAGCATCTTCTTAC_chip02_HC1" ...
  .. .. .. .. .. ..$ : chr [1:50] "PC_1" "PC_2" "PC_3" "PC_4" ...
  .. .. .. ..@ feature.loadings          : num [1:2000, 1:50] 0.0687 0.0849 0.0327 0.0306 0.0231 ...
  .. .. .. .. ..- attr(*, "dimnames")=List of 2
  .. .. .. .. .. ..$ : chr [1:2000] "RGS1" "HLA-DRA" "RNASE6" "FOS" ...
  .. .. .. .. .. ..$ : chr [1:50] "PC_1" "PC_2" "PC_3" "PC_4" ...
  .. .. .. ..@ feature.loadings.projected: num[0 , 0 ] 
  .. .. .. ..@ assay.used                : chr "RNA"
  .. .. .. ..@ global                    : logi FALSE
  .. .. .. ..@ stdev                     : num [1:50] 4.08 3.83 3.06 2.55 2.36 ...
  .. .. .. ..@ jackstraw                 :Formal class 'JackStrawData' [package "SeuratObject"] with 4 slots
  .. .. .. .. .. ..@ empirical.p.values     : num[0 , 0 ] 
  .. .. .. .. .. ..@ fake.reduction.scores  : num[0 , 0 ] 
  .. .. .. .. .. ..@ empirical.p.values.full: num[0 , 0 ] 
  .. .. .. .. .. ..@ overall.p.values       : num[0 , 0 ] 
  .. .. .. ..@ misc                      :List of 1
  .. .. .. .. ..$ total.variance: num 1241
  .. .. .. ..@ key                       : chr "PC_"
  .. ..$ umap:Formal class 'DimReduc' [package "SeuratObject"] with 9 slots
  .. .. .. ..@ cell.embeddings           : num [1:7488, 1:2] -6.53 -7.2 -5.86 -5.47 -4.25 ...
  .. .. .. .. ..- attr(*, "dimnames")=List of 2
  .. .. .. .. .. ..$ : chr [1:7488] "ATTCAAGGCGATATCC_chip02_HC1" "ATTCAAGGTTAGGCGG_chip02_HC1" "GACTCAAGAGTCTCCG_chip02_HC1" "CTAAGCATCTTCTTAC_chip02_HC1" ...
  .. .. .. .. .. ..$ : chr [1:2] "umap_1" "umap_2"
  .. .. .. ..@ feature.loadings          : num[0 , 0 ] 
  .. .. .. ..@ feature.loadings.projected: num[0 , 0 ] 
  .. .. .. ..@ assay.used                : chr "RNA"
  .. .. .. ..@ global                    : logi TRUE
  .. .. .. ..@ stdev                     : num(0) 
  .. .. .. ..@ jackstraw                 :Formal class 'JackStrawData' [package "SeuratObject"] with 4 slots
  .. .. .. .. .. ..@ empirical.p.values     : num[0 , 0 ] 
  .. .. .. .. .. ..@ fake.reduction.scores  : num[0 , 0 ] 
  .. .. .. .. .. ..@ empirical.p.values.full: num[0 , 0 ] 
  .. .. .. .. .. ..@ overall.p.values       : num[0 , 0 ] 
  .. .. .. ..@ misc                      : list()
  .. .. .. ..@ key                       : chr "umap_"
  ..@ images      : list()
  ..@ project.name: chr "SeuratProject"
  ..@ misc        : list()
  ..@ version     :Classes 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 1 3
  ..@ commands    :List of 7
  .. ..$ NormalizeData.RNA       :Formal class 'SeuratCommand' [package "SeuratObject"] with 5 slots
  .. .. .. ..@ name       : chr "NormalizeData.RNA"
  .. .. .. ..@ time.stamp : POSIXct[1:1], format: "2024-07-31 14:50:00"
  .. .. .. ..@ assay.used : chr "RNA"
  .. .. .. ..@ call.string: chr "NormalizeData(sn_atlas_processed)"
  .. .. .. ..@ params     :List of 5
  .. .. .. .. ..$ assay               : chr "RNA"
  .. .. .. .. ..$ normalization.method: chr "LogNormalize"
  .. .. .. .. ..$ scale.factor        : num 10000
  .. .. .. .. ..$ margin              : num 1
  .. .. .. .. ..$ verbose             : logi TRUE
  .. ..$ FindVariableFeatures.RNA:Formal class 'SeuratCommand' [package "SeuratObject"] with 5 slots
  .. .. .. ..@ name       : chr "FindVariableFeatures.RNA"
  .. .. .. ..@ time.stamp : POSIXct[1:1], format: "2024-07-31 14:50:12"
  .. .. .. ..@ assay.used : chr "RNA"
  .. .. .. ..@ call.string: chr [1:2] "FindVariableFeatures(sn_atlas_processed, selection.method = \"vst\", " "    nfeatures = 2000)"
  .. .. .. ..@ params     :List of 12
  .. .. .. .. ..$ assay              : chr "RNA"
  .. .. .. .. ..$ selection.method   : chr "vst"
  .. .. .. .. ..$ loess.span         : num 0.3
  .. .. .. .. ..$ clip.max           : chr "auto"
  .. .. .. .. ..$ mean.function      :function (mat, display_progress)  
  .. .. .. .. ..$ dispersion.function:function (mat, display_progress)  
  .. .. .. .. ..$ num.bin            : num 20
  .. .. .. .. ..$ binning.method     : chr "equal_width"
  .. .. .. .. ..$ nfeatures          : num 2000
  .. .. .. .. ..$ mean.cutoff        : num [1:2] 0.1 8
  .. .. .. .. ..$ dispersion.cutoff  : num [1:2] 1 Inf
  .. .. .. .. ..$ verbose            : logi TRUE
  .. ..$ ScaleData.RNA           :Formal class 'SeuratCommand' [package "SeuratObject"] with 5 slots
  .. .. .. ..@ name       : chr "ScaleData.RNA"
  .. .. .. ..@ time.stamp : POSIXct[1:1], format: "2024-07-31 14:50:13"
  .. .. .. ..@ assay.used : chr "RNA"
  .. .. .. ..@ call.string: chr "ScaleData(sn_atlas_processed)"
  .. .. .. ..@ params     :List of 10
  .. .. .. .. ..$ features          : chr [1:2000] "RGS1" "HLA-DRA" "RNASE6" "FOS" ...
  .. .. .. .. ..$ assay             : chr "RNA"
  .. .. .. .. ..$ model.use         : chr "linear"
  .. .. .. .. ..$ use.umi           : logi FALSE
  .. .. .. .. ..$ do.scale          : logi TRUE
  .. .. .. .. ..$ do.center         : logi TRUE
  .. .. .. .. ..$ scale.max         : num 10
  .. .. .. .. ..$ block.size        : num 1000
  .. .. .. .. ..$ min.cells.to.block: num 3000
  .. .. .. .. ..$ verbose           : logi TRUE
  .. ..$ RunPCA.RNA              :Formal class 'SeuratCommand' [package "SeuratObject"] with 5 slots
  .. .. .. ..@ name       : chr "RunPCA.RNA"
  .. .. .. ..@ time.stamp : POSIXct[1:1], format: "2024-07-31 14:50:52"
  .. .. .. ..@ assay.used : chr "RNA"
  .. .. .. ..@ call.string: chr "RunPCA(sn_atlas_processed, features = VariableFeatures(object = sn_atlas_processed))"
  .. .. .. ..@ params     :List of 11
  .. .. .. .. ..$ assay          : chr "RNA"
  .. .. .. .. ..$ features       : chr [1:2000] "RGS1" "HLA-DRA" "RNASE6" "FOS" ...
  .. .. .. .. ..$ npcs           : num 50
  .. .. .. .. ..$ rev.pca        : logi FALSE
  .. .. .. .. ..$ weight.by.var  : logi TRUE
  .. .. .. .. ..$ verbose        : logi TRUE
  .. .. .. .. ..$ ndims.print    : int [1:5] 1 2 3 4 5
  .. .. .. .. ..$ nfeatures.print: num 30
  .. .. .. .. ..$ reduction.name : chr "pca"
  .. .. .. .. ..$ reduction.key  : chr "PC_"
  .. .. .. .. ..$ seed.use       : num 42
  .. ..$ FindNeighbors.RNA.pca   :Formal class 'SeuratCommand' [package "SeuratObject"] with 5 slots
  .. .. .. ..@ name       : chr "FindNeighbors.RNA.pca"
  .. .. .. ..@ time.stamp : POSIXct[1:1], format: "2024-07-31 14:50:57"
  .. .. .. ..@ assay.used : chr "RNA"
  .. .. .. ..@ call.string: chr "FindNeighbors(sn_atlas_processed, dims = 1:10)"
  .. .. .. ..@ params     :List of 16
  .. .. .. .. ..$ reduction      : chr "pca"
  .. .. .. .. ..$ dims           : int [1:10] 1 2 3 4 5 6 7 8 9 10
  .. .. .. .. ..$ assay          : chr "RNA"
  .. .. .. .. ..$ k.param        : num 20
  .. .. .. .. ..$ return.neighbor: logi FALSE
  .. .. .. .. ..$ compute.SNN    : logi TRUE
  .. .. .. .. ..$ prune.SNN      : num 0.0667
  .. .. .. .. ..$ nn.method      : chr "annoy"
  .. .. .. .. ..$ n.trees        : num 50
  .. .. .. .. ..$ annoy.metric   : chr "euclidean"
  .. .. .. .. ..$ nn.eps         : num 0
  .. .. .. .. ..$ verbose        : logi TRUE
  .. .. .. .. ..$ do.plot        : logi FALSE
  .. .. .. .. ..$ graph.name     : chr [1:2] "RNA_nn" "RNA_snn"
  .. .. .. .. ..$ l2.norm        : logi FALSE
  .. .. .. .. ..$ cache.index    : logi FALSE
  .. ..$ FindClusters            :Formal class 'SeuratCommand' [package "SeuratObject"] with 5 slots
  .. .. .. ..@ name       : chr "FindClusters"
  .. .. .. ..@ time.stamp : POSIXct[1:1], format: "2024-07-31 14:51:01"
  .. .. .. ..@ assay.used : chr "RNA"
  .. .. .. ..@ call.string: chr "FindClusters(sn_atlas_processed, resolution = 0.6)"
  .. .. .. ..@ params     :List of 11
  .. .. .. .. ..$ graph.name      : chr "RNA_snn"
  .. .. .. .. ..$ cluster.name    : chr "RNA_snn_res.0.6"
  .. .. .. .. ..$ modularity.fxn  : num 1
  .. .. .. .. ..$ resolution      : num 0.6
  .. .. .. .. ..$ method          : chr "matrix"
  .. .. .. .. ..$ algorithm       : num 1
  .. .. .. .. ..$ n.start         : num 10
  .. .. .. .. ..$ n.iter          : num 10
  .. .. .. .. ..$ random.seed     : num 0
  .. .. .. .. ..$ group.singletons: logi TRUE
  .. .. .. .. ..$ verbose         : logi TRUE
  .. ..$ RunUMAP.RNA.pca         :Formal class 'SeuratCommand' [package "SeuratObject"] with 5 slots
  .. .. .. ..@ name       : chr "RunUMAP.RNA.pca"
  .. .. .. ..@ time.stamp : POSIXct[1:1], format: "2024-07-31 14:51:28"
  .. .. .. ..@ assay.used : chr "RNA"
  .. .. .. ..@ call.string: chr "RunUMAP(sn_atlas_processed, dims = 1:10)"
  .. .. .. ..@ params     :List of 25
  .. .. .. .. ..$ dims                : int [1:10] 1 2 3 4 5 6 7 8 9 10
  .. .. .. .. ..$ reduction           : chr "pca"
  .. .. .. .. ..$ assay               : chr "RNA"
  .. .. .. .. ..$ slot                : chr "data"
  .. .. .. .. ..$ umap.method         : chr "uwot"
  .. .. .. .. ..$ return.model        : logi FALSE
  .. .. .. .. ..$ n.neighbors         : int 30
  .. .. .. .. ..$ n.components        : int 2
  .. .. .. .. ..$ metric              : chr "cosine"
  .. .. .. .. ..$ learning.rate       : num 1
  .. .. .. .. ..$ min.dist            : num 0.3
  .. .. .. .. ..$ spread              : num 1
  .. .. .. .. ..$ set.op.mix.ratio    : num 1
  .. .. .. .. ..$ local.connectivity  : int 1
  .. .. .. .. ..$ repulsion.strength  : num 1
  .. .. .. .. ..$ negative.sample.rate: int 5
  .. .. .. .. ..$ uwot.sgd            : logi FALSE
  .. .. .. .. ..$ seed.use            : int 42
  .. .. .. .. ..$ angular.rp.forest   : logi FALSE
  .. .. .. .. ..$ densmap             : logi FALSE
  .. .. .. .. ..$ dens.lambda         : num 2
  .. .. .. .. ..$ dens.frac           : num 0.3
  .. .. .. .. ..$ dens.var.shift      : num 0.1
  .. .. .. .. ..$ verbose             : logi TRUE
  .. .. .. .. ..$ reduction.name      : chr "umap"
  ..@ tools       : list()
Length  Class   Mode 
     1 Seurat     S4
#+end_example
* Select cells and genes
We want to select Cells that are either control or parkinsons
We want to only select the genes that are in our network.
#+begin_src R :session :tangle ../r/init_data_explore_extract.r :comments link :shebang "#!/usr/bin/env Rscript" :results output :exports both
  sn_atlas_dans_ctrl_vs_pd <- subset(sn_atlas_dans, subset = Disease %in% c("CTR", "PD_B5-6", "PD_B3-4"))
  sn_atlas_dans_ctrl_vs_pd_pathway <- sn_atlas_dans_ctrl_vs_pd[common_names,]
  dim(sn_atlas_dans_ctrl_vs_pd_pathway)

  
#+end_src

#+RESULTS:
: [1]  526 6385

#+begin_src R :session :tangle ../r/init_data_explore_extract.r :comments link :shebang "#!/usr/bin/env Rscript" :results output :exports both

# Extract the expression matrix for the subset
expression_matrix <- as.data.frame(t(as.matrix(sn_atlas_dans_ctrl_vs_pd_pathway@assays$RNA@data)))

# Add Disease column from metadata
expression_matrix$Disease <- sn_atlas_dans_ctrl_vs_pd_pathway@meta.data$Disease

# Save to CSV
write.csv(expression_matrix, file = "../../data/cell_expression_with_disease.csv", row.names = TRUE)


#+end_src

#+RESULTS:


#+begin_src R :session :tangle ../r/init_data_explore_extract.r :comments link :shebang "#!/usr/bin/env Rscript" :results output :exports both

# Extract the count matrix for the subset and transpose it for cells as rows
count_matrix <- as.data.frame(t(as.matrix(sn_atlas_dans_ctrl_vs_pd_pathway@assays$RNA@counts)))

# Add Disease column from metadata
count_matrix$Disease <- sn_atlas_dans_ctrl_vs_pd_pathway@meta.data$Disease

# Save to CSV
write.csv(count_matrix, file = "../../data/cell_count_with_disease.csv", row.names = TRUE)

#+end_src

#+RESULTS:
